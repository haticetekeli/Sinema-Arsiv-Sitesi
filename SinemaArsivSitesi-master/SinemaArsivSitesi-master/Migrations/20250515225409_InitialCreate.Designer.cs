// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SinemaArsivSitesi.Data.DbContext;

#nullable disable

namespace SinemaArsivSitesi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250515225409_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2025, 5, 16, 1, 54, 7, 676, DateTimeKind.Local).AddTicks(9063),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bilim Kurgu"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2025, 5, 16, 1, 54, 7, 683, DateTimeKind.Local).AddTicks(5315),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Komedi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2025, 5, 16, 1, 54, 7, 683, DateTimeKind.Local).AddTicks(5358),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Aksiyon"
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2025, 5, 16, 1, 54, 7, 683, DateTimeKind.Local).AddTicks(5363),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Dram"
                        });
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("IMDBRating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tenet kelimesiyle silahlanmış bir ajan, küresel casusluk dünyasında görev alıyor.",
                            Director = "Christopher Nolan",
                            Duration = "150",
                            Genre = "Aksiyon, Bilim Kurgu, Gerilim",
                            IMDBRating = 7.3m,
                            IsActive = true,
                            IsDeleted = false,
                            Language = "İngilizce",
                            PosterUrl = "https://tr.web.img3.acsta.net/pictures/20/08/28/14/59/2855138.jpg",
                            Title = "Tenet",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=L3pk_TBwu3M",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Dom Cobb, insanların rüyalarına girerek bilinçaltlarından sır çalabilen bir hırsızdır.",
                            Director = "Christopher Nolan",
                            Duration = "148",
                            Genre = "Bilim Kurgu, Aksiyon, Gerilim",
                            IMDBRating = 8.8m,
                            IsActive = true,
                            IsDeleted = false,
                            Language = "İngilizce",
                            PosterUrl = "https://fullhdfilmizlede.net/uploads/filmler/baslangic-inception.jpg",
                            Title = "Inception",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=YoHD9XEInc0",
                            Year = 2010
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kral Arthur ve Yuvarlak Masa Şövalyeleri'nin Kutsal Kase'yi bulmak için çıktıkları yolculuk.",
                            Director = "Terry Gilliam, Terry Jones",
                            Duration = "91",
                            Genre = "Absürt Komedi, Parodi",
                            IMDBRating = 8.2m,
                            IsActive = true,
                            IsDeleted = false,
                            Language = "İngilizce",
                            PosterUrl = "https://tr.web.img3.acsta.net/medias/nmedia/18/80/37/57/19546984.jpg",
                            Title = "Monty Python and the Holy Grail",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=LGq3OnOYZ5E",
                            Year = 1975
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ünlü bir otelin konsiyerji Gustave H. ve çalışanı Zero'nun çalınan bir tabloyla ilgili macerası.",
                            Director = "Wes Anderson",
                            Duration = "99",
                            Genre = "Komedi, Macera, Suç",
                            IMDBRating = 8.1m,
                            IsActive = true,
                            IsDeleted = false,
                            Language = "İngilizce",
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BMzM5NjUxOTEyMl5BMl5BanBnXkFtZTgwNjEyMDM0MDE@._V1_.jpg",
                            Title = "The Grand Budapest Hotel",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=1Fg5iWmQjfk",
                            Year = 2014
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Max, Immortan Joe'dan kaçan Furiosa ve diğerleriyle özgürlüğe kaçmaya çalışır.",
                            Director = "George Miller",
                            Duration = "120",
                            Genre = "Aksiyon, Macera, Bilim Kurgu",
                            IMDBRating = 8.1m,
                            IsActive = true,
                            IsDeleted = false,
                            Language = "İngilizce",
                            PosterUrl = "https://play-lh.googleusercontent.com/IAFsZ8rqbpzrwuavU_ZkgPmxFiB-0lxM3na4kYnvm4qeOcA5J5rZ5E7ue2uPjLvZhCoylQ",
                            Title = "Mad Max: Fury Road",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=hEJnMQG9ev8",
                            Year = 2015
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "John McClane, teröristlerce rehin alınan karısını kurtarmaya çalışır.",
                            Director = "John McTiernan",
                            Duration = "132",
                            Genre = "Aksiyon, Gerilim",
                            IMDBRating = 8.2m,
                            IsActive = true,
                            IsDeleted = false,
                            Language = "İngilizce",
                            PosterUrl = "https://tr.web.img2.acsta.net/pictures/bzp/01/4019.jpg",
                            Title = "Die Hard",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=2TQ-pOvI6Xo",
                            Year = 1988
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Andy Dufresne'nin Shawshank Hapishanesi'ndeki yılları ve dostluğu anlatılır.",
                            Director = "Frank Darabont",
                            Duration = "142",
                            Genre = "Dram",
                            IMDBRating = 9.3m,
                            IsActive = true,
                            IsDeleted = false,
                            Language = "İngilizce",
                            PosterUrl = "https://m.media-amazon.com/images/I/61-vQDr7ecL._AC_UF894,1000_QL80_.jpg",
                            Title = "The Shawshank Redemption",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=6hB3S9bIaco",
                            Year = 1994
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedById = 0,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Corleone ailesinin mafya dünyasındaki yükselişi ve aile içi çatışmaları.",
                            Director = "Francis Ford Coppola",
                            Duration = "175",
                            Genre = "Suç, Dram",
                            IMDBRating = 9.2m,
                            IsActive = true,
                            IsDeleted = false,
                            Language = "İngilizce",
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BNGEwYjgwOGQtYjg5ZS00Njc1LTk2ZGEtM2QwZWQ2NjdhZTE5XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg",
                            Title = "The Godfather",
                            UpdatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VideoUrl = "https://www.youtube.com/watch?v=sY1S34973zA",
                            Year = 1972
                        });
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.RelatedMovie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelatedMovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId", "RelatedMovieId");

                    b.HasIndex("RelatedMovieId");

                    b.ToTable("RelatedMovies");
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("UserFavoriteMovie", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserFavoriteMovies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SinemaArsivSitesi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SinemaArsivSitesi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaArsivSitesi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SinemaArsivSitesi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.Comment", b =>
                {
                    b.HasOne("SinemaArsivSitesi.Models.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaArsivSitesi.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.Movie", b =>
                {
                    b.HasOne("SinemaArsivSitesi.Models.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.RelatedMovie", b =>
                {
                    b.HasOne("SinemaArsivSitesi.Models.Movie", "Movie")
                        .WithMany("RelatedMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SinemaArsivSitesi.Models.Movie", "Related")
                        .WithMany("RelatedToMovies")
                        .HasForeignKey("RelatedMovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Related");
                });

            modelBuilder.Entity("UserFavoriteMovie", b =>
                {
                    b.HasOne("SinemaArsivSitesi.Models.Movie", "Movie")
                        .WithMany("UserFavoriteMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaArsivSitesi.Models.ApplicationUser", "User")
                        .WithMany("FavoriteMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinemaArsivSitesi.Models.User", null)
                        .WithMany("FavoriteMovies")
                        .HasForeignKey("UserId1");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.ApplicationUser", b =>
                {
                    b.Navigation("FavoriteMovies");
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("RelatedMovies");

                    b.Navigation("RelatedToMovies");

                    b.Navigation("UserFavoriteMovies");
                });

            modelBuilder.Entity("SinemaArsivSitesi.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoriteMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
